<?xml version="1.0"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:mx="library://ns.adobe.com/flex/mx"
               xmlns:s="library://ns.adobe.com/flex/spark" xmlns:local="*">

    <s:layout>
        <s:VerticalLayout horizontalAlign="center" verticalAlign="middle"/>
    </s:layout>

    <fx:Style>
        global {
            fontSize: 16px;
        }
    </fx:Style>

    <fx:Script><![CDATA[
        import events.LoginEvent;

        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.core.SoundAsset;
        import mx.events.IndexChangedEvent;
        import mx.events.ListEvent;
        import mx.formatters.DateFormatter;
        import mx.managers.PopUpManager;

        import utils.AlertShow;
        import utils.RemoteObjectUtils;

        import vo.ScanBatch;
        import vo.ScanCase;

        [Embed(source="/assets/success.mp3")]
        public var successVoice:Class;

        [Embed(source="/assets/error.mp3")]
        public var errorVoice:Class;


        [Bindable]
        public var sessionKeepLabel:String = "";

        // 每5分钟保持session状态 1000 * 60 * 5
        // 每1秒钟保持session状态 1000

        private var sessionKeeperMils:Number = 1000 * 60 * 5;


        [Bindable]
        public var cookie:String;
        [Bindable]
        public var scanBath:ScanBatch;

        public var _unitList:ArrayCollection = new ArrayCollection();
        public var _caseList:ArrayCollection = new ArrayCollection();

        private var df:DateFormatter = new DateFormatter("YYYY-MM-DD JJ:NN:SS");

        [Bindable]
        public var currentCase:ScanCase;

        [Bindable]
        protected var actualCount:Number = 0; //已扫描单位数

        [Bindable]
        protected var unitCount:Number = 0; //已扫描当前包装箱的单位数

        [Bindable]
        protected var actualCaseCount:Number = 0; //已扫描包装箱数

        private var caseRegExp:RegExp = null;

        private var unitRegExp:RegExp = null;


        public function set caseList(list:ArrayCollection):void {
            _caseList = list;
            actualCount = 0;
            actualCaseCount = 0;
            if (list != null) {
                for each(var caseItem in caseList) {
                    actualCount += caseItem.count as Number;
                }
                actualCaseCount = list.length;
            }

        }

        [Bindable]
        public function get caseList():ArrayCollection {
            return _caseList;
        }


        public function set unitList(list:ArrayCollection):void {
            _unitList = list;
            if (list == null) {
                unitCount = 0;
            } else {
                unitCount = list.length;
            }
        }

        [Bindable]
        public function get unitList():ArrayCollection {
            return _unitList;
        }

        [Bindable]
        public var keyString:String = "";


        [Bindable]
        public function get unitsPerCase():Number {
            if (scanBath && scanBath.unitsPerCase) {
                return new Number(scanBath.unitsPerCase);
            }
            return 0;
        }


        //扫描添加
        private function scan(itemId:String):void {
            if (!scanBath.runId) {
                Alert.show("请登录亚马逊新创建一个货柜,并获取cookie!");
                return;
            }
            //第一次扫包装盒 或者 当前包装盒装满的情况下
            if (currentCase == null || currentCase.count >= unitsPerCase) {
                if (!itemId || !isCase(itemId)) {
                    reset(false, "请扫描一个新的包装");
                    return;
                }
                saveCase(itemId);
            } else { //未装满继续装
                if (!itemId || !isUnit(itemId)) {
                    reset(false, "请扫描包装 " + currentCase.itemId + " 内的货品");
                    return;
                }
                saveUnit(itemId);
            }
        }

        private function reset(success:Boolean, msg:String):void {
            scanItemInput.text = "";
            errMsgText.text = msg;
            if (success) {
                errMsgText.setStyle("color", "green");
                SoundAsset(new successVoice).play();
            } else {
                errMsgText.setStyle("color", "red");
                SoundAsset(new errorVoice).play();
            }
        }

        private function saveCase(itemId:String):void {
            RemoteObjectUtils.execute("dataService", "saveCase", function (success:Boolean, data:Object) {
                        if (success) {
                            loadCaseList();
                            reset(true, "扫描了包装 " + itemId);
                        } else {
                            reset(false, data.message);
                        }
                    },
                    scanBath.batchId,
                    itemId
            );
        }

        private function saveUnit(itemId:String):void {
            RemoteObjectUtils.execute("dataService", "saveItem", function (success:Boolean, data:Object) {
                        if (success) {
//                            loadCaseList();
                            loadUnitList();
                            reset(true, "扫描了货品 " + itemId);
                        } else {
                            reset(false, data.message);
                        }
                    },
                    scanBath.batchId,
                    currentCase.itemId,
                    itemId
            );
        }


        //是否是单位
        private function isUnit(inputTxt:String):Boolean {
            return unitRegExp.test(inputTxt);
        }

        //是否是包装
        private function isCase(inputTxt:String):Boolean {
            return caseRegExp.test(inputTxt);
        }

        //取消运行
        private function cancelRun(event:MouseEvent):void {
            RemoteObjectUtils.execute("amazonService", "cancelScanRun", function (success:Boolean, data:Object) {
                        if (success) {
                            scanBath = null;
                            reset(true, "成功取消运行")
                        } else {
                            reset(false, data.message);
                        }
                    },
                    cookie,
                    scanBath.runId
            );
        }

        //获取运行信息
        private function login():void {
            var login:Login = new Login();
            login.addEventListener("login", function (event:LoginEvent):void {
                if (cookie) {
                    RemoteObjectUtils.execute("dataService", "createBatch", function (success:Boolean, data:Object) {
                                if (success) {
                                    scanBath = data as ScanBatch;
                                    caseRegExp = new RegExp(scanBath.caseLabelRegExPattern);
                                    unitRegExp = new RegExp(scanBath.unitLabelRegExPattern);
                                    currentCase = null;
                                    loadCaseList();
                                    PopUpManager.removePopUp(login);
                                    scanItemInput.setFocus();
                                    startTimerBatch();
                                } else {
                                    Alert.show(data.message, '错误');
                                }
                            },
                            cookie);
                }
            })
            PopUpManager.addPopUp(login, this, true);
            PopUpManager.centerPopUp(login);
        }

        // 每5分钟保持session状态
        private var batchTimer:Timer = new Timer(sessionKeeperMils, 0);

        private function startTimerBatch():void {
            if (!batchTimer.hasEventListener(TimerEvent.TIMER)) {
                batchTimer.addEventListener(TimerEvent.TIMER, keepSession);
            }
            batchTimer.start();
            keepSession(null);
        }

        private function stopTimerBatch():void {
            if (batchTimer.running) {
                batchTimer.stop();
            }
        }

        private function keepSession(event:TimerEvent):void {
            if (!cookie) {
                stopTimerBatch();
                return;
            }
            RemoteObjectUtils.execute("amazonService", "keepSession", function (success:Boolean, data:Object):void {
                if (success) {
                    sessionKeepLabel = data as String;
                } else {
                    sessionKeepLabel = "请检查网络...";
                }
            }, cookie);
        }

        // 刷新包装列表
        public function loadCaseList():void {
            caseList = new ArrayCollection();
            unitList = new ArrayCollection();
            caseGrid.selectedIndex = -1;
            currentCase = null;
            RemoteObjectUtils.execute("dataService", "findCaseList", function (success:Boolean, data:Object) {
                        if (success) {
                            caseList = data as ArrayCollection;
                            // 如果有包装列表
                            if (caseList != null && caseList.length > 0) {
                                currentCase = caseList.getItemAt(0) as ScanCase;
                                loadUnitList();
                            }
                        } else {
                            reset(false, data.message);
                        }
                    },
                    scanBath.batchId,
                    selectedBox.selected
            );
        }

        // 刷新单位列表
        public function loadUnitList():void {
            if (currentCase) {
                RemoteObjectUtils.execute("dataService", "findItemList", function (success:Boolean, data:Object) {
                            if (success) {
                                unitList = data as ArrayCollection;
                                currentCase.count = unitList.length;
                                (caseGrid.dataProvider as ArrayCollection).itemUpdated(currentCase);
                            } else {
                                reset(false, data.message);
                            }
                        },
                        scanBath.batchId,
                        currentCase.itemId,
                        selectedBox.selected
                );

            }
        }

        private function scanItemInput_keyDownHandler(event:KeyboardEvent):void {
            if (event.keyCode == Keyboard.ENTER) {
                scan(scanItemInput.text);
            }
        }

        private function caseGrid_itemClickHandler(event:ListEvent):void {
            if (caseGrid.selectedIndex != -1) {
                currentCase = caseGrid.selectedItem as ScanCase;
//                reset(true,"更换了包装: "+currentCase.itemId);
            }
            loadUnitList();
        }

        private function submitData(event:MouseEvent):void {
            AlertShow.operateConfirm("确认提交该批次数据?", "提交数据", this, function ():void {
                RemoteObjectUtils.execute("dataService", "submitScan", function (success:Boolean, data:Object) {
                            if (success) {
                                Alert.show("已成功提交数据到亚马逊Transparency系统", "成功");
                                selectedBox.selected = true;
                                errMsgText.text = "请登录亚马逊新创建一个货柜,并获取cookie!"
                                currentCase = null;
                                scanBath.runId = null;
                                loadCaseList();
                            } else {
                                Alert.show("提交数据失败 " + data.message, "失败");
                                scanItemInput.setFocus();
                            }
                        },
                        cookie,
                        scanBath.batchId
                );
            });
        }


        private function selectedBox_changeHandler(event:Event):void {
            if (!selectedBox.selected) {
                scanItemInput.setFocus();
            }
            loadCaseList();
        }

        private function xuhaoLabelFun(data:Object, column:DataGridColumn):String {
            return (caseList.length - caseList.getItemIndex(data)) + '';
        }

        private function xuhao2LabelFun(data:Object, column:DataGridColumn):String {
            return (unitList.length - unitList.getItemIndex(data)) + '';
        }

        private function submitLabelFun(data:Object, column:DataGridColumn):String {
            var _lb:String = "";
            if (data.requestStatus) {
                _lb += data.requestStatus;
                _lb += ' ';
            }
            if (data.submitTime) {
                _lb += df.format(data.submitTime);
                _lb += ' ';
            }
            if (data.failureReason) {
                _lb += data.failureReason;
            }
            return _lb;
        }

        private function button1_clickHandler(event:MouseEvent):void {
            var ccc:Cookie = new Cookie();
            PopUpManager.addPopUp(ccc, this, true);
            PopUpManager.centerPopUp(ccc);
        }

        private function button2_clickHandler(event:MouseEvent):void {
            if (caseGrid.selectedIndex == -1) {
                scanItemInput.setFocus();
                return;
            }
            AlertShow.operateConfirm("删除选择的包装?", "删除", this, function ():void {
                RemoteObjectUtils.execute("dataService", "deleteCase", function (success:Boolean, data:Object) {
                            if (success) {
                                reset(true, "成功删除包装 " + caseGrid.selectedItem.itemId)
                            }
                            scanItemInput.setFocus();
                            loadCaseList();
                        },
                        scanBath.batchId,
                        caseGrid.selectedItem.itemId
                );
            }, function ():void {
                scanItemInput.setFocus();
            });
        }

        private function tabNavigator1_changeHandler(event:IndexChangedEvent):void {
            if (event.newIndex == 0) {
                scanItemInput.setFocus();
            }
        }
        ]]>
    </fx:Script>

    <mx:Panel title="SourceMark v2    {sessionKeepLabel}"
              width="100%"
              height="100%"
              paddingLeft="10"
              paddingRight="10"
              paddingBottom="10"
              horizontalAlign="center"
              verticalAlign="middle">

        <mx:TabNavigator width="100%" height="100%" change="tabNavigator1_changeHandler(event)">
            <mx:VBox label="当前扫描" width="100%" height="100%">
                <mx:HBox width="100%">
                    <mx:Form width="80%">
                        <mx:FormItem label="RUNID:">
                            <mx:HBox>
                                <mx:Text text="{scanBath.runId}"></mx:Text>
                                <mx:Button label="获取runId" click="login()"></mx:Button>
                                <mx:Button label="提交数据" click="submitData(event)"></mx:Button>
                                <mx:CheckBox selected="false" id="selectedBox" label="显示已完成数据"
                                             change="selectedBox_changeHandler(event)"></mx:CheckBox>
                                <!--<mx:Button label="验证cookie" click="button1_clickHandler(event)"></mx:Button>-->
                            </mx:HBox>
                        </mx:FormItem>
                        <mx:FormItem label="商品:">
                            <mx:Text text="{scanBath.productTitle}"></mx:Text>
                        </mx:FormItem>
                        <mx:FormItem label="批次编号:">
                            <mx:Text text="{scanBath.manufacturerLot}"></mx:Text>
                        </mx:FormItem>
                        <mx:FormItem label="ASIN:">
                            <mx:Text text="{scanBath.asin}"></mx:Text>
                        </mx:FormItem>
                        <mx:FormItem label="备注:">
                            <mx:Text text="{scanBath.manufacturerReference}"></mx:Text>
                        </mx:FormItem>
                        <mx:FormItem label="包装箱 UPC/GTIN:">
                            <mx:Text text="{scanBath.parentUpc}"></mx:Text>
                        </mx:FormItem>
                        <mx:FormItem label="扫描条码:" enabled="{!selectedBox.selected}">
                            <mx:TextInput fontSize="25" height="40" id="scanItemInput" minWidth="350" text="{keyString}"
                                          keyDown="scanItemInput_keyDownHandler(event)"></mx:TextInput>
                        </mx:FormItem>
                        <mx:FormItem label="当前包装:" enabled="{!selectedBox.selected}">
                            <mx:HBox width="100%">
                                <mx:Text fontSize="20" fontWeight="bold" text="{currentCase.itemId}"></mx:Text>
                                <mx:Button label="删除包装" click="button2_clickHandler(event)"
                                           visible="{!selectedBox.selected}"></mx:Button>
                            </mx:HBox>
                        </mx:FormItem>
                        <mx:FormItem label="信息:" enabled="{!selectedBox.selected}">
                            <mx:Text fontSize="20" fontWeight="bold" color="red" id="errMsgText"></mx:Text>
                        </mx:FormItem>
                    </mx:Form>
                    <mx:VBox width="20%">
                        <mx:Panel title="已扫描的 单位 标签数量" width="100%" height="120" horizontalAlign="center"
                                  verticalAlign="middle">
                            <mx:Label text="{actualCount} / {scanBath.expectedCount}" fontWeight="bold" fontSize="28"/>
                        </mx:Panel>
                        <mx:HBox width="100%" height="100%">
                            <mx:Panel title="扫描到当前 包装箱 中的 单位 标签数量" width="100%" height="120" horizontalAlign="center"
                                      verticalAlign="middle">
                                <mx:Label text="{unitCount} / {scanBath.unitsPerCase}"
                                          fontWeight="bold" fontSize="28"/>
                            </mx:Panel>
                            <mx:Panel title="已扫描的 包装箱 标签数量" width="100%" height="120" horizontalAlign="center"
                                      verticalAlign="middle">
                                <mx:Label text="{actualCaseCount} / {scanBath.expectedCaseCount}" fontWeight="bold"
                                          fontSize="28"/>
                            </mx:Panel>
                        </mx:HBox>
                    </mx:VBox>
                </mx:HBox>
                <mx:HBox width="100%" height="100%" paddingLeft="20" paddingRight="20">
                    <mx:Panel width="100%" height="100%" title="已扫描包装列表">
                        <mx:DataGrid id="caseGrid" width="100%" height="100%" dataProvider="{caseList}" fontSize="14"
                                     itemClick="caseGrid_itemClickHandler(event)">
                            <mx:columns>
                                <mx:DataGridColumn sortable="false" headerText="序号" dataField="itemId" width="60"
                                                   labelFunction="xuhaoLabelFun"></mx:DataGridColumn>
                                <mx:DataGridColumn sortable="false" headerText="包装ID号" dataField="itemId"
                                                   width="350"></mx:DataGridColumn>
                                <mx:DataGridColumn sortable="false" fontSize="16" fontWeight="bold" headerText="已包装数"
                                                   dataField="count"
                                                   width="100"></mx:DataGridColumn>
                                <mx:DataGridColumn sortable="false" headerText="状态" dataField="requestStatus"
                                                   labelFunction="submitLabelFun"></mx:DataGridColumn>
                            </mx:columns>
                        </mx:DataGrid>
                    </mx:Panel>
                    <mx:Panel width="100%" height="100%" title="已扫描单位列表">
                        <mx:DataGrid id="unitGrid" width="100%" height="100%" dataProvider="{unitList}" fontSize="14">
                            <mx:columns>
                                <mx:DataGridColumn sortable="false" headerText="序号" dataField="itemId" width="60"
                                                   labelFunction="xuhao2LabelFun"></mx:DataGridColumn>
                                <mx:DataGridColumn sortable="false" headerText="单ID位号" dataField="itemId"
                                                   width="400"></mx:DataGridColumn>
                                <mx:DataGridColumn sortable="false" headerText="状态" dataField="requestStatus"
                                                   labelFunction="submitLabelFun"></mx:DataGridColumn>
                            </mx:columns>
                        </mx:DataGrid>
                    </mx:Panel>
                </mx:HBox>
            </mx:VBox>

            <local:History label="扫描历史" width="100%" height="100%">

            </local:History>

        </mx:TabNavigator>


    </mx:Panel>

</s:Application>
